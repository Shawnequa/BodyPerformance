Reference Information & Descriptions

# This colab notebook provides an analysis of Body performance Data
# This dataset can be acquired from this link: https://www.kaggle.com/datasets/kukuroo3/body-performance-data

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA

Data Ingestion

df = pd.read_csv('/content/bodyPerformance.csv')

Set Display Options for Data Inspection

pd.set_option('display.max_columns', 40)

pd.set_option('display.max_rows', 40)

Initial Inspection & Data Cleansing 

print(df.head())
print(df.info())
print(df.describe())

Drop Catergorical Variables 

df = df.drop(['gender', 'class'], axis=1)

Check for missing values 

df.isna().sum()

Data Exploration - Basic Statistics

print(df.describe())

Correlation Heatmap

sns.set(rc = {'figure.figsize':(15,8)})
sns.heatmap(df.corr().abs(), annot = True, cmap = 'coolwarm')
plt.title('Correlation Heatmap')
plt.show()

Clustering Analysis
Scaling the Data

scaler = StandardScaler()
df_scaled = scaler.fit_transform(df)

Elbow Method for Optimal Clusters

wss = []
for i in range (1,10):
  km = KMeans(n_clusters = i, init='k-means++', random_state=42)
  km.fit(df)
  wss.append(km.inertia_)

plt.plot(range(1,10), wss)
plt.title('The Elbow Method')
plt.xlabel('The Number of Clusters')
plt.ylabel('Sum of Squared Distances')
plt.show()

Silhouette Scores for Different Clusters

silhouette_coefficients = []
for i in range(2,10):
    km = KMeans(n_clusters = i, max_iter=100)
    km.fit(df)
    score = silhouette_score(df, km.labels_)
    silhouette_coefficients.append(score)
    
plt.plot(range(2,10), silhouette_coefficients)
plt.xticks(range(2,10))
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Coefficient')
plt.show()


Dimensionality Reduction using PCA

pca = PCA()
X = pca.fit_transform(df_scaled)

KMean Clustering with Chosen Number of Clusters

km = KMeans(n_clusters=3) 
label = km.fit_predict(X)
unique_labels = np.unique(label)

Visualizing Clusters

for i in unique_labels:
    plt.scatter(X[label==i,0], X[label==i,1], label=i)
    
plt.legend()
plt.title('Body Performance Clusters')
plt.show()
